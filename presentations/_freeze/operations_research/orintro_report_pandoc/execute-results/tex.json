{
  "hash": "5905f8ba3d865c6f282fbfe67dc81c45",
  "result": {
    "markdown": "---\ntitle: Introduction to Operations Research\nsubtitle: ''\nauthor: Dr. Andreas Maier\ndate: '2022-10-31'\nformat:\n  revealjs:\n    preview-links: auto\n    theme: default\n    logo: um_logo.png\n    slide-number: true\n    footer: '<https://www.unbelievable-machine.com/>'\n    code-line-numbers: false\n    center: true\n    smaller: true\nexecute:\n  echo: true\n---\n\n# Introduction to Operations Research\n\nOR (in german \"Operationsforschung\" oder \"Unternehmensplanung\")\n\n-   using analytical methods to improve decision making  \n-   strives to maximize profit or minimize loss\n-   [optimization](https://en.wikipedia.org/wiki/Mathematical_optimization)\n    of [convex\n    objectives](https://en.wikipedia.org/wiki/Convex_optimization) with\n    convex constraints (single global optimum)\n-   integer, continuous, mixed solutions\n\n## History\n\n-   1939 Leonid Kantorowitch (USSR) : The Mathematical Method of\n    Production Planning and Organization =\\> Linear Programming (LP)\n-   [WW2: First use of OR in the\n    West](https://en.wikipedia.org/wiki/Operations_research#Second_World_War)\n    -   optimal placement of radar stations in UK\n    -   optimal convoy size against german submarine attacks\n    -   optimization of allied air raids\n-   1947 Georg Dantzig (USA): [Simplex\n    algorithm](https://en.wikipedia.org/wiki/Simplex_algorithm) for LP  \n-   1960s Land and Doig (British Petroleum): [Branch and\n    Bound](https://en.wikipedia.org/wiki/Branch_and_bound) meta\n    algorithm\n\n## Examples: Stigler diet\n\nWhich quantities a 70kg male would have to consume from 77 different\nfoods to\n\n-   fulfill the recommended intake of 9 different nutrients in 1943\n-   keeping expense at a minimum (prices from 1939)\n\nLP solved by trial and error (before Simplex) by Stigler in 1945.\n\nSee\n\n-   <https://en.wikipedia.org/wiki/Stigler_diet>\n-   <https://www.kaggle.com/code/nicapotato/optimisation-101-with-or-tools/notebook>\n\n## Examples: Stigler diet 2\n\nLater Dantzig\n\n-   improved Stiglers solution with Simplex algorithm\n-   tried to find the optimal diet to loose weight with Simplex on a\n    computer.\n\nHe failed (because he didn't include upper limit constraints)\n\n-   Computer recommended ridiculous amounts of apple cider, bran,\n    boullion cubes\n-   His wifes diet for him was superior and he lost 11 kg\n\nSee\n\n-   Dantzig (1990): The Diet Problem\n\n## Examples: Optimizing the USSR\n\n1950s - 1970s : Kantorowitch et. al. try to use OR/LP to optimize\ncentral planning in USSR\n\nBut failure due to\n\n-   Too many variables - too little compute power at that time\n-   Non-linearities\n-   How to choose a correct function to optimize for society an for\n    innovations?\n-   Data quality (directors lied about capacities of factories)\n\nSee\n\n-   <https://chris-said.io/2016/05/11/optimizing-things-in-the-ussr/>\n-   Spufford (2012): Red Plenty\n\n## Tooling: Commercial only?\n\n-   OR is much older field than ML/AI\n-   rooted in (secret) military research or patented by oil companies\n-   driven by math proofs not by code\n-   mathematicians cannot code\n\nExamples:\n\n-   [FICO\n    Express](https://www.fico.com/en/products/fico-xpress-optimization),\n    [IBM\n    CPLEX](https://www.ibm.com/products/ilog-cplex-optimization-studio),\n    [MOSEK](https://www.mosek.com/), [GUROBI](https://www.gurobi.com/),\n    [LocalSolver](https://www.localsolver.com/)\n-   MATLAB, Mathematica\n\nSee\n\n-   [Why is the programming code of many algorithms not public in the OR\n    community?](https://or.stackexchange.com/questions/61/why-is-the-programming-code-of-many-algorithms-not-public-in-the-or-community)\n\n## Tooling: Open and free solvers\n\n-   [OptaPlanner](https://www.optaplanner.org/) (Java)\n-   [COIN-OR](https://www.coin-or.org/) (C/C++)\n-   [SCIP](https://www.scipopt.org/) (C/C++, wrappers for Python, Julia,\n    Java, ...), Zuse Institute Berlin, FU Dahlem\n-   [scipy.optimize](https://docs.scipy.org/doc/scipy/reference/optimize.html)\n    (Python)\n-   [Google OR-Tools](https://developers.google.com/optimization)\n    (Python, C++, Java, C#)\n\nSee\n\n-   [List of implementations for common OR\n    problems](https://or.stackexchange.com/questions/841/list-of-implementations-for-common-or-problems)\n\n## Google OR-Tools\n\n-   Open source software for combinatorial optimization\n    -   Vehicle routing, Bin packing, Scheduling\n    -   Graph algorithm\n    -   Linear and Mixed-Integer programming\n-   OR-Tools uses SOTA algorithms to narrow down vast number of possible\n    solutions to optimal solution\n-   Wrapper around SCIP, GUROBI, CPLEX, XPRESS\n\n## Introduction LP with OR-Tools\n\nMaximize $3x + y$ subject to the following constraints: $$\n0 \\leq x \\leq 1 \\\\\n0 \\leq y \\leq 2 \\\\\nx + y \\leq 2\n$$\n\nThis is a LP problem with continuous variables.\n\nsee\n\n-   <https://developers.google.com/optimization/introduction/python>\n\n\n---\n\n::: {.cell slideshow='{\"slide_type\":\"slide\"}' execution_count=1}\n``` {.python .cell-code}\nfrom ortools.linear_solver import pywraplp\nfrom ortools.init import pywrapinit\n\n# Create the linear solver with the GLOP (the Google Linear Optimization Package) backend (advanced simplex)\n# see https://en.wikipedia.org/wiki/GLOP\nsolver = pywraplp.Solver.CreateSolver('GLOP')\n```\n:::\n\n\n\n. . .\n\n::: {.cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=2}\n``` {.python .cell-code}\n# Create the variables x and y and their bounds.\nx = solver.NumVar(0, 1, 'x')   # bound 0 <= x <= 1\ny = solver.NumVar(0, 2, 'y')   # bound 0 <= y <= 2\n\nprint('Number of variables =', solver.NumVariables())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of variables = 2\n```\n:::\n:::\n\n\n\n. . .\n\n::: {.cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=3}\n``` {.python .cell-code}\n# Create a linear constraint, 0 <= x + y <= 2.\nct = solver.Constraint(0, 2, 'ct')\nct.SetCoefficient(x, 1)\nct.SetCoefficient(y, 1)\n\nprint('Number of constraints =', solver.NumConstraints())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of constraints = 1\n```\n:::\n:::\n\n\n\n---\n\n::: {.cell slideshow='{\"slide_type\":\"slide\"}' execution_count=4}\n``` {.python .cell-code}\n# Create the objective function, 3 * x + y.\nobjective = solver.Objective()\nobjective.SetCoefficient(x, 3)\nobjective.SetCoefficient(y, 1)\nobjective.SetMaximization()\n```\n:::\n\n\n\n. . .\n\n::: {.cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=5}\n``` {.python .cell-code}\nsolver.Solve()\nprint('Solution:')\nprint('Objective value =', objective.Value())\nprint('x =', x.solution_value())\nprint('y =', y.solution_value())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSolution:\nObjective value = 4.0\nx = 1.0\ny = 1.0\n```\n:::\n:::\n\n\n# Stiglers diet with OR-Tools\n\nMinimize the sum of money in dollar spent on food $f_i$ for $i=1..77$ $$\nmin \\sum_i f_i \n$$ The contraints are that the sum of all nutrients in the purchased\nfood $i$ must be bigger than the minimum for each nutrient $n_j$ for\n$j=1..9$. $$\n\\sum_i f_i * \\text{nutrient_per_dollar}_{ij} \\geq n_j\n$$ So we have a LP problem with 77 variables and 9 constraints.\n\n\n---\n\n::: {.cell slideshow='{\"slide_type\":\"slide\"}' execution_count=7}\n``` {.python .cell-code}\n# Calories are set to 3 instead of 3000, because in the table from 1939 Stigler gave the data in 1000s of Calories \n# (see https://math.berkeley.edu/~mgu/MA170F2015/Diet.pdf)\n# The notion of `kcal` () taken from the Google example) seems wrong here. 1 Calorie refers to 1000 kcal, not 1 kcal.\n\nprint(\"Nutritional Contraints Table\")\ndisplay(pd.DataFrame(nutrients, columns = ['Nutrient', 'Daily Recommended Intake']).set_index('Nutrient'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNutritional Contraints Table\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=tex}\n\\begin{tabular}{lr}\n\\toprule\n{} &  Daily Recommended Intake \\\\\nNutrient        &                           \\\\\n\\midrule\nCalories (kcal) &                       3.0 \\\\\nProtein (g)     &                      70.0 \\\\\nCalcium (g)     &                       0.8 \\\\\nIron (mg)       &                      12.0 \\\\\nVitamin A (KIU) &                       5.0 \\\\\nVitamin B1 (mg) &                       1.8 \\\\\nVitamin B2 (mg) &                       2.7 \\\\\nNiacin (mg)     &                      18.0 \\\\\nVitamin C (mg)  &                      75.0 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n\n---\n\n::: {.cell slideshow='{\"slide_type\":\"slide\"}' execution_count=8}\n``` {.python .cell-code}\nprint(\"Food Nutrition Table\")\ndisplay(pd.DataFrame(data,columns = [\"Commodity\",\"Unit\",\"1939 price (cents)\",\"Calories\",\"Protein (g)\",\"Calcium (g)\",\"Iron (mg)\",\"Vitamin A (IU)\",\"Thiamine (mg)\",\"Riboflavin (mg)\",\"Niacin (mg)\",\"Ascorbic Acid (mg)\"]).set_index(\"Commodity\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFood Nutrition Table\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=tex}\n\\begin{tabular}{llrrrrrrrrrr}\n\\toprule\n{} &        Unit &  1939 price (cents) &  Calories &  Protein (g) &  Calcium (g) &  Iron (mg) &  Vitamin A (IU) &  Thiamine (mg) &  Riboflavin (mg) &  Niacin (mg) &  Ascorbic Acid (mg) \\\\\nCommodity               &             &                     &           &              &              &            &                 &                &                  &              &                     \\\\\n\\midrule\nWheat Flour (Enriched)  &      10 lb. &                36.0 &      44.7 &         1411 &          2.0 &        365 &             0.0 &           55.4 &             33.3 &          441 &                   0 \\\\\nMacaroni                &       1 lb. &                14.1 &      11.6 &          418 &          0.7 &         54 &             0.0 &            3.2 &              1.9 &           68 &                   0 \\\\\nWheat Cereal (Enriched) &      28 oz. &                24.2 &      11.8 &          377 &         14.4 &        175 &             0.0 &           14.4 &              8.8 &          114 &                   0 \\\\\nCorn Flakes             &       8 oz. &                 7.1 &      11.4 &          252 &          0.1 &         56 &             0.0 &           13.5 &              2.3 &           68 &                   0 \\\\\nCorn Meal               &       1 lb. &                 4.6 &      36.0 &          897 &          1.7 &         99 &            30.9 &           17.4 &              7.9 &          106 &                   0 \\\\\nHominy Grits            &      24 oz. &                 8.5 &      28.6 &          680 &          0.8 &         80 &             0.0 &           10.6 &              1.6 &          110 &                   0 \\\\\nRice                    &       1 lb. &                 7.5 &      21.2 &          460 &          0.6 &         41 &             0.0 &            2.0 &              4.8 &           60 &                   0 \\\\\nRolled Oats             &       1 lb. &                 7.1 &      25.3 &          907 &          5.1 &        341 &             0.0 &           37.1 &              8.9 &           64 &                   0 \\\\\nWhite Bread (Enriched)  &       1 lb. &                 7.9 &      15.0 &          488 &          2.5 &        115 &             0.0 &           13.8 &              8.5 &          126 &                   0 \\\\\nWhole Wheat Bread       &       1 lb. &                 9.1 &      12.2 &          484 &          2.7 &        125 &             0.0 &           13.9 &              6.4 &          160 &                   0 \\\\\nRye Bread               &       1 lb. &                 9.1 &      12.4 &          439 &          1.1 &         82 &             0.0 &            9.9 &              3.0 &           66 &                   0 \\\\\nPound Cake              &       1 lb. &                24.8 &       8.0 &          130 &          0.4 &         31 &            18.9 &            2.8 &              3.0 &           17 &                   0 \\\\\nSoda Crackers           &       1 lb. &                15.1 &      12.5 &          288 &          0.5 &         50 &             0.0 &            0.0 &              0.0 &            0 &                   0 \\\\\nMilk                    &       1 qt. &                11.0 &       6.1 &          310 &         10.5 &         18 &            16.8 &            4.0 &             16.0 &            7 &                 177 \\\\\nEvaporated Milk (can)   &    14.5 oz. &                 6.7 &       8.4 &          422 &         15.1 &          9 &            26.0 &            3.0 &             23.5 &           11 &                  60 \\\\\nButter                  &       1 lb. &                30.8 &      10.8 &            9 &          0.2 &          3 &            44.2 &            0.0 &              0.2 &            2 &                   0 \\\\\nOleomargarine           &       1 lb. &                16.1 &      20.6 &           17 &          0.6 &          6 &            55.8 &            0.2 &              0.0 &            0 &                   0 \\\\\nEggs                    &      1 doz. &                32.6 &       2.9 &          238 &          1.0 &         52 &            18.6 &            2.8 &              6.5 &            1 &                   0 \\\\\nCheese (Cheddar)        &       1 lb. &                24.2 &       7.4 &          448 &         16.4 &         19 &            28.1 &            0.8 &             10.3 &            4 &                   0 \\\\\nCream                   &     1/2 pt. &                14.1 &       3.5 &           49 &          1.7 &          3 &            16.9 &            0.6 &              2.5 &            0 &                  17 \\\\\nPeanut Butter           &       1 lb. &                17.9 &      15.7 &          661 &          1.0 &         48 &             0.0 &            9.6 &              8.1 &          471 &                   0 \\\\\nMayonnaise              &     1/2 pt. &                16.7 &       8.6 &           18 &          0.2 &          8 &             2.7 &            0.4 &              0.5 &            0 &                   0 \\\\\nCrisco                  &       1 lb. &                20.3 &      20.1 &            0 &          0.0 &          0 &             0.0 &            0.0 &              0.0 &            0 &                   0 \\\\\nLard                    &       1 lb. &                 9.8 &      41.7 &            0 &          0.0 &          0 &             0.2 &            0.0 &              0.5 &            5 &                   0 \\\\\nSirloin Steak           &       1 lb. &                39.6 &       2.9 &          166 &          0.1 &         34 &             0.2 &            2.1 &              2.9 &           69 &                   0 \\\\\nRound Steak             &       1 lb. &                36.4 &       2.2 &          214 &          0.1 &         32 &             0.4 &            2.5 &              2.4 &           87 &                   0 \\\\\nRib Roast               &       1 lb. &                29.2 &       3.4 &          213 &          0.1 &         33 &             0.0 &            0.0 &              2.0 &            0 &                   0 \\\\\nChuck Roast             &       1 lb. &                22.6 &       3.6 &          309 &          0.2 &         46 &             0.4 &            1.0 &              4.0 &          120 &                   0 \\\\\nPlate                   &       1 lb. &                14.6 &       8.5 &          404 &          0.2 &         62 &             0.0 &            0.9 &              0.0 &            0 &                   0 \\\\\nLiver (Beef)            &       1 lb. &                26.8 &       2.2 &          333 &          0.2 &        139 &           169.2 &            6.4 &             50.8 &          316 &                 525 \\\\\nLeg of Lamb             &       1 lb. &                27.6 &       3.1 &          245 &          0.1 &         20 &             0.0 &            2.8 &              3.9 &           86 &                   0 \\\\\nLamb Chops (Rib)        &       1 lb. &                36.6 &       3.3 &          140 &          0.1 &         15 &             0.0 &            1.7 &              2.7 &           54 &                   0 \\\\\nPork Chops              &       1 lb. &                30.7 &       3.5 &          196 &          0.2 &         30 &             0.0 &           17.4 &              2.7 &           60 &                   0 \\\\\nPork Loin Roast         &       1 lb. &                24.2 &       4.4 &          249 &          0.3 &         37 &             0.0 &           18.2 &              3.6 &           79 &                   0 \\\\\nBacon                   &       1 lb. &                25.6 &      10.4 &          152 &          0.2 &         23 &             0.0 &            1.8 &              1.8 &           71 &                   0 \\\\\nHam, smoked             &       1 lb. &                27.4 &       6.7 &          212 &          0.2 &         31 &             0.0 &            9.9 &              3.3 &           50 &                   0 \\\\\nSalt Pork               &       1 lb. &                16.0 &      18.8 &          164 &          0.1 &         26 &             0.0 &            1.4 &              1.8 &            0 &                   0 \\\\\nRoasting Chicken        &       1 lb. &                30.3 &       1.8 &          184 &          0.1 &         30 &             0.1 &            0.9 &              1.8 &           68 &                  46 \\\\\nVeal Cutlets            &       1 lb. &                42.3 &       1.7 &          156 &          0.1 &         24 &             0.0 &            1.4 &              2.4 &           57 &                   0 \\\\\nSalmon, Pink (can)      &      16 oz. &                13.0 &       5.8 &          705 &          6.8 &         45 &             3.5 &            1.0 &              4.9 &          209 &                   0 \\\\\nApples                  &       1 lb. &                 4.4 &       5.8 &           27 &          0.5 &         36 &             7.3 &            3.6 &              2.7 &            5 &                 544 \\\\\nBananas                 &       1 lb. &                 6.1 &       4.9 &           60 &          0.4 &         30 &            17.4 &            2.5 &              3.5 &           28 &                 498 \\\\\nLemons                  &      1 doz. &                26.0 &       1.0 &           21 &          0.5 &         14 &             0.0 &            0.5 &              0.0 &            4 &                 952 \\\\\nOranges                 &      1 doz. &                30.9 &       2.2 &           40 &          1.1 &         18 &            11.1 &            3.6 &              1.3 &           10 &                1998 \\\\\nGreen Beans             &       1 lb. &                 7.1 &       2.4 &          138 &          3.7 &         80 &            69.0 &            4.3 &              5.8 &           37 &                 862 \\\\\nCabbage                 &       1 lb. &                 3.7 &       2.6 &          125 &          4.0 &         36 &             7.2 &            9.0 &              4.5 &           26 &                5369 \\\\\nCarrots                 &     1 bunch &                 4.7 &       2.7 &           73 &          2.8 &         43 &           188.5 &            6.1 &              4.3 &           89 &                 608 \\\\\nCelery                  &     1 stalk &                 7.3 &       0.9 &           51 &          3.0 &         23 &             0.9 &            1.4 &              1.4 &            9 &                 313 \\\\\nLettuce                 &      1 head &                 8.2 &       0.4 &           27 &          1.1 &         22 &           112.4 &            1.8 &              3.4 &           11 &                 449 \\\\\nOnions                  &       1 lb. &                 3.6 &       5.8 &          166 &          3.8 &         59 &            16.6 &            4.7 &              5.9 &           21 &                1184 \\\\\nPotatoes                &      15 lb. &                34.0 &      14.3 &          336 &          1.8 &        118 &             6.7 &           29.4 &              7.1 &          198 &                2522 \\\\\nSpinach                 &       1 lb. &                 8.1 &       1.1 &          106 &          0.0 &        138 &           918.4 &            5.7 &             13.8 &           33 &                2755 \\\\\nSweet Potatoes          &       1 lb. &                 5.1 &       9.6 &          138 &          2.7 &         54 &           290.7 &            8.4 &              5.4 &           83 &                1912 \\\\\nPeaches (can)           &   No. 2 1/2 &                16.8 &       3.7 &           20 &          0.4 &         10 &            21.5 &            0.5 &              1.0 &           31 &                 196 \\\\\nPears (can)             &   No. 2 1/2 &                20.4 &       3.0 &            8 &          0.3 &          8 &             0.8 &            0.8 &              0.8 &            5 &                  81 \\\\\nPineapple (can)         &   No. 2 1/2 &                21.3 &       2.4 &           16 &          0.4 &          8 &             2.0 &            2.8 &              0.8 &            7 &                 399 \\\\\nAsparagus (can)         &       No. 2 &                27.7 &       0.4 &           33 &          0.3 &         12 &            16.3 &            1.4 &              2.1 &           17 &                 272 \\\\\nGreen Beans (can)       &       No. 2 &                10.0 &       1.0 &           54 &          2.0 &         65 &            53.9 &            1.6 &              4.3 &           32 &                 431 \\\\\nPork and Beans (can)    &      16 oz. &                 7.1 &       7.5 &          364 &          4.0 &        134 &             3.5 &            8.3 &              7.7 &           56 &                   0 \\\\\nCorn (can)              &       No. 2 &                10.4 &       5.2 &          136 &          0.2 &         16 &            12.0 &            1.6 &              2.7 &           42 &                 218 \\\\\nPeas (can)              &       No. 2 &                13.8 &       2.3 &          136 &          0.6 &         45 &            34.9 &            4.9 &              2.5 &           37 &                 370 \\\\\nTomatoes (can)          &       No. 2 &                 8.6 &       1.3 &           63 &          0.7 &         38 &            53.2 &            3.4 &              2.5 &           36 &                1253 \\\\\nTomato Soup (can)       &  10 1/2 oz. &                 7.6 &       1.6 &           71 &          0.6 &         43 &            57.9 &            3.5 &              2.4 &           67 &                 862 \\\\\nPeaches, Dried          &       1 lb. &                15.7 &       8.5 &           87 &          1.7 &        173 &            86.8 &            1.2 &              4.3 &           55 &                  57 \\\\\nPrunes, Dried           &       1 lb. &                 9.0 &      12.8 &           99 &          2.5 &        154 &            85.7 &            3.9 &              4.3 &           65 &                 257 \\\\\nRaisins, Dried          &      15 oz. &                 9.4 &      13.5 &          104 &          2.5 &        136 &             4.5 &            6.3 &              1.4 &           24 &                 136 \\\\\nPeas, Dried             &       1 lb. &                 7.9 &      20.0 &         1367 &          4.2 &        345 &             2.9 &           28.7 &             18.4 &          162 &                   0 \\\\\nLima Beans, Dried       &       1 lb. &                 8.9 &      17.4 &         1055 &          3.7 &        459 &             5.1 &           26.9 &             38.2 &           93 &                   0 \\\\\nNavy Beans, Dried       &       1 lb. &                 5.9 &      26.9 &         1691 &         11.4 &        792 &             0.0 &           38.4 &             24.6 &          217 &                   0 \\\\\nCoffee                  &       1 lb. &                22.4 &       0.0 &            0 &          0.0 &          0 &             0.0 &            4.0 &              5.1 &           50 &                   0 \\\\\nTea                     &     1/4 lb. &                17.4 &       0.0 &            0 &          0.0 &          0 &             0.0 &            0.0 &              2.3 &           42 &                   0 \\\\\nCocoa                   &       8 oz. &                 8.6 &       8.7 &          237 &          3.0 &         72 &             0.0 &            2.0 &             11.9 &           40 &                   0 \\\\\nChocolate               &       8 oz. &                16.2 &       8.0 &           77 &          1.3 &         39 &             0.0 &            0.9 &              3.4 &           14 &                   0 \\\\\nSugar                   &      10 lb. &                51.7 &      34.9 &            0 &          0.0 &          0 &             0.0 &            0.0 &              0.0 &            0 &                   0 \\\\\nCorn Syrup              &      24 oz. &                13.7 &      14.7 &            0 &          0.5 &         74 &             0.0 &            0.0 &              0.0 &            5 &                   0 \\\\\nMolasses                &      18 oz. &                13.6 &       9.0 &            0 &         10.3 &        244 &             0.0 &            1.9 &              7.5 &          146 &                   0 \\\\\nStrawberry Preserves    &       1 lb. &                20.5 &       6.4 &           11 &          0.4 &          7 &             0.2 &            0.2 &              0.4 &            3 &                   0 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n\n---\n\n::: {.cell slideshow='{\"slide_type\":\"slide\"}' execution_count=9}\n``` {.python .cell-code}\nsolver = pywraplp.Solver.CreateSolver('GLOP')\n```\n:::\n\n\n\n. . .\n\n::: {.cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=10}\n``` {.python .cell-code}\n# Declare an array to hold our variables. (f = foods)\nfoods = [solver.NumVar(0.0, solver.infinity(), item[0]) for item in data]\n\nprint('Number of variables =', solver.NumVariables())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of variables = 77\n```\n:::\n:::\n\n\n\n. . .\n\n::: {.cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=11}\n``` {.python .cell-code}\n# Create the constraints, one per nutrient. (data = nutrients_per_dollar)\n# gurobipy can express a lists or arrays of constraints with a nicer DSL \n# instead of the many loops necessary with OR-Tools\nconstraints = []\nfor i, nutrient in enumerate(nutrients):\n    constraints.append(solver.Constraint(nutrient[1], solver.infinity()))\n    for j, item in enumerate(data):\n        constraints[i].SetCoefficient(foods[j], item[i + 3])\n\nprint('Number of constraints =', solver.NumConstraints())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of constraints = 9\n```\n:::\n:::\n\n\n\n. . .\n\n::: {.cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=12}\n``` {.python .cell-code}\n# Objective function: Minimize the sum of (price-normalized) foods.\nobjective = solver.Objective()\nfor food in foods:\n    objective.SetCoefficient(food, 1)\nobjective.SetMinimization()\n```\n:::\n\n\n\n---\n\n::: {.cell slideshow='{\"slide_type\":\"slide\"}' execution_count=13}\n``` {.python .cell-code}\nstatus = solver.Solve()\n\n# Check that the problem has an optimal solution.\nif status != solver.OPTIMAL:\n    print('The problem does not have an optimal solution!')\n    if status == solver.FEASIBLE:\n        print('A potentially suboptimal solution was found.')\n    else:\n        print('The solver could not solve the problem.')\n        exit(1)\n```\n:::\n\n\n\n---\n\n::: {.cell slideshow='{\"slide_type\":\"slide\"}' execution_count=14}\n``` {.python .cell-code}\n# Display the amounts (in dollars) to purchase of each food.\nnutrients_result = [0] * len(nutrients)\nprint('\\nAnnual Foods:')\nfor i, food in enumerate(foods):\n    if food.solution_value() > 0.0:\n        print('{}: ${}'.format(data[i][0], 365. * food.solution_value()))\n        for j, _ in enumerate(nutrients):\n            nutrients_result[j] += data[i][j + 3] * food.solution_value()\nprint('\\nOptimal annual price: ${:.4f}'.format(365. * objective.Value()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nAnnual Foods:\nWheat Flour (Enriched): $10.774457511918223\nLiver (Beef): $0.6907834111074193\nCabbage: $4.093268864842877\nSpinach: $1.8277960703546996\nNavy Beans, Dried: $22.275425687243036\n\nOptimal annual price: $39.6617\n```\n:::\n:::\n\n\n\n---\n\n::: {.cell slideshow='{\"slide_type\":\"slide\"}' execution_count=15}\n``` {.python .cell-code}\nprint('\\nNutrients per day:')\nfor i, nutrient in enumerate(nutrients):\n    print('{}: {:.2f} (min {})'.format(nutrient[0], nutrients_result[i],\n                                       nutrient[1]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nNutrients per day:\nCalories (kcal): 3.00 (min 3)\nProtein (g): 147.41 (min 70)\nCalcium (g): 0.80 (min 0.8)\nIron (mg): 60.47 (min 12)\nVitamin A (KIU): 5.00 (min 5)\nVitamin B1 (mg): 4.12 (min 1.8)\nVitamin B2 (mg): 2.70 (min 2.7)\nNiacin (mg): 27.32 (min 18)\nVitamin C (mg): 75.00 (min 75)\n```\n:::\n:::\n\n\n## Stieglers diet remarks\n\n> \"No one recommends these diets for anyone, let alone everyone.\"\n> (Stigler)\n\nMy observation: The amount of iron for spinach is 10x as high as in\nreality. Fixing this does not change the result. So why is spinach\nincluded in the diet?\n\n\n---\n\n::: {.cell slideshow='{\"slide_type\":\"slide\"}' execution_count=16}\n``` {.python .cell-code}\nnutrient_per_food = {}\n\nfor i, food in enumerate(foods):\n    if food.solution_value() > 0.0:      \n        for j, nutrient in enumerate(nutrients):\n            if food in nutrient_per_food:\n                nutrient_per_food[food].append(data[i][j + 3] * food.solution_value())\n            else:\n                nutrient_per_food[food]=[data[i][j + 3] * food.solution_value()]\n                \nfoods_df = pd.DataFrame.from_dict(nutrient_per_food, orient='index', columns=[n[0] for n in nutrients])\n\nfor i, nutrient in enumerate(nutrients):\n    foods_df[nutrient[0]]=(foods_df[nutrient[0]]/nutrients_result[i]*100).round(2)\n\ndisplay(foods_df)                 \n```\n\n::: {.cell-output .cell-output-display}\n```{=tex}\n\\begin{tabular}{lrrrrrrrrr}\n\\toprule\n{} &  Calories (kcal) &  Protein (g) &  Calcium (g) &  Iron (mg) &  Vitamin A (KIU) &  Vitamin B1 (mg) &  Vitamin B2 (mg) &  Niacin (mg) &  Vitamin C (mg) \\\\\n\\midrule\nWheat Flour (Enriched) &            43.98 &        28.25 &         7.38 &      17.82 &             0.00 &            39.69 &            36.41 &        47.66 &            0.00 \\\\\nLiver (Beef)           &             0.14 &         0.43 &         0.05 &       0.44 &             6.40 &             0.29 &             3.56 &         2.19 &            1.32 \\\\\nCabbage                &             0.97 &         0.95 &         5.61 &       0.67 &             1.61 &             2.45 &             1.87 &         1.07 &           80.28 \\\\\nSpinach                &             0.18 &         0.36 &         0.00 &       1.14 &            91.98 &             0.69 &             2.56 &         0.60 &           18.39 \\\\\nNavy Beans, Dried      &            54.72 &        70.01 &        86.97 &      79.94 &             0.00 &            56.87 &            55.60 &        48.48 &            0.00 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n## The end\n\nGoogle OR-Tools seem the best free open-source tool for solving OR\nproblems:\n\n-   good documentation\n-   many examples\n-   gurobipy has a nicer DSL for defining lists/arrays of constraints\n-   gurobipy free trial is limited to 2000 variables, OR-Tools are\n    unlimited\n\n**Next session**: How to solve the facility location problem with\nOR-Tools and apply that to solve the Shell Hackathon.\n\n<span style=\"font-size:larger;\">Eat your spinach - Not for the iron, but\nfor the Vitamin A!</span>\n\n",
    "supporting": [
      "orintro_report_pandoc_files/figure-beamer"
    ],
    "filters": []
  }
}
{
  "hash": "5905f8ba3d865c6f282fbfe67dc81c45",
  "result": {
    "markdown": "---\ntitle: Introduction to Operations Research\nsubtitle: ''\nauthor: Dr. Andreas Maier\ndate: '2022-10-31'\nformat:\n  revealjs:\n    preview-links: auto\n    theme: default\n    logo: um_logo.png\n    slide-number: true\n    footer: '<https://www.unbelievable-machine.com/>'\n    code-line-numbers: false\n    center: true\n    smaller: true\nexecute:\n  echo: true\n---\n\n# Introduction to Operations Research\n\nOR (in german \"Operationsforschung\" oder \"Unternehmensplanung\")\n\n-   using analytical methods to improve decision making  \n-   strives to maximize profit or minimize loss\n-   [optimization](https://en.wikipedia.org/wiki/Mathematical_optimization)\n    of [convex\n    objectives](https://en.wikipedia.org/wiki/Convex_optimization) with\n    convex constraints (single global optimum)\n-   integer, continuous, mixed solutions\n\n## History\n\n-   1939 Leonid Kantorowitch (USSR) : The Mathematical Method of\n    Production Planning and Organization =\\> Linear Programming (LP)\n-   [WW2: First use of OR in the\n    West](https://en.wikipedia.org/wiki/Operations_research#Second_World_War)\n    -   optimal placement of radar stations in UK\n    -   optimal convoy size against german submarine attacks\n    -   optimization of allied air raids\n-   1947 Georg Dantzig (USA): [Simplex\n    algorithm](https://en.wikipedia.org/wiki/Simplex_algorithm) for LP  \n-   1960s Land and Doig (British Petroleum): [Branch and\n    Bound](https://en.wikipedia.org/wiki/Branch_and_bound) meta\n    algorithm\n\n## Examples: Stigler diet\n\nWhich quantities a 70kg male would have to consume from 77 different\nfoods to\n\n-   fulfill the recommended intake of 9 different nutrients in 1943\n-   keeping expense at a minimum (prices from 1939)\n\nLP solved by trial and error (before Simplex) by Stigler in 1945.\n\nSee\n\n-   <https://en.wikipedia.org/wiki/Stigler_diet>\n-   <https://www.kaggle.com/code/nicapotato/optimisation-101-with-or-tools/notebook>\n\n## Examples: Stigler diet 2\n\nLater Dantzig\n\n-   improved Stiglers solution with Simplex algorithm\n-   tried to find the optimal diet to loose weight with Simplex on a\n    computer.\n\nHe failed (because he didn't include upper limit constraints)\n\n-   Computer recommended ridiculous amounts of apple cider, bran,\n    boullion cubes\n-   His wifes diet for him was superior and he lost 11 kg\n\nSee\n\n-   Dantzig (1990): The Diet Problem\n\n## Examples: Optimizing the USSR\n\n1950s - 1970s : Kantorowitch et. al. try to use OR/LP to optimize\ncentral planning in USSR\n\nBut failure due to\n\n-   Too many variables - too little compute power at that time\n-   Non-linearities\n-   How to choose a correct function to optimize for society an for\n    innovations?\n-   Data quality (directors lied about capacities of factories)\n\nSee\n\n-   <https://chris-said.io/2016/05/11/optimizing-things-in-the-ussr/>\n-   Spufford (2012): Red Plenty\n\n## Tooling: Commercial only?\n\n-   OR is much older field than ML/AI\n-   rooted in (secret) military research or patented by oil companies\n-   driven by math proofs not by code\n-   mathematicians cannot code\n\nExamples:\n\n-   [FICO\n    Express](https://www.fico.com/en/products/fico-xpress-optimization),\n    [IBM\n    CPLEX](https://www.ibm.com/products/ilog-cplex-optimization-studio),\n    [MOSEK](https://www.mosek.com/), [GUROBI](https://www.gurobi.com/),\n    [LocalSolver](https://www.localsolver.com/)\n-   MATLAB, Mathematica\n\nSee\n\n-   [Why is the programming code of many algorithms not public in the OR\n    community?](https://or.stackexchange.com/questions/61/why-is-the-programming-code-of-many-algorithms-not-public-in-the-or-community)\n\n## Tooling: Open and free solvers\n\n-   [OptaPlanner](https://www.optaplanner.org/) (Java)\n-   [COIN-OR](https://www.coin-or.org/) (C/C++)\n-   [SCIP](https://www.scipopt.org/) (C/C++, wrappers for Python, Julia,\n    Java, ...), Zuse Institute Berlin, FU Dahlem\n-   [scipy.optimize](https://docs.scipy.org/doc/scipy/reference/optimize.html)\n    (Python)\n-   [Google OR-Tools](https://developers.google.com/optimization)\n    (Python, C++, Java, C#)\n\nSee\n\n-   [List of implementations for common OR\n    problems](https://or.stackexchange.com/questions/841/list-of-implementations-for-common-or-problems)\n\n## Google OR-Tools\n\n-   Open source software for combinatorial optimization\n    -   Vehicle routing, Bin packing, Scheduling\n    -   Graph algorithm\n    -   Linear and Mixed-Integer programming\n-   OR-Tools uses SOTA algorithms to narrow down vast number of possible\n    solutions to optimal solution\n-   Wrapper around SCIP, GUROBI, CPLEX, XPRESS\n\n## Introduction LP with OR-Tools\n\nMaximize $3x + y$ subject to the following constraints: $$\n0 \\leq x \\leq 1 \\\\\n0 \\leq y \\leq 2 \\\\\nx + y \\leq 2\n$$\n\nThis is a LP problem with continuous variables.\n\nsee\n\n-   <https://developers.google.com/optimization/introduction/python>\n\n\n---\n\n::: {.cell slideshow='{\"slide_type\":\"slide\"}' execution_count=1}\n``` {.python .cell-code}\nfrom ortools.linear_solver import pywraplp\nfrom ortools.init import pywrapinit\n\n# Create the linear solver with the GLOP (the Google Linear Optimization Package) backend (advanced simplex)\n# see https://en.wikipedia.org/wiki/GLOP\nsolver = pywraplp.Solver.CreateSolver('GLOP')\n```\n:::\n\n\n\n. . .\n\n::: {.cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=2}\n``` {.python .cell-code}\n# Create the variables x and y and their bounds.\nx = solver.NumVar(0, 1, 'x')   # bound 0 <= x <= 1\ny = solver.NumVar(0, 2, 'y')   # bound 0 <= y <= 2\n\nprint('Number of variables =', solver.NumVariables())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of variables = 2\n```\n:::\n:::\n\n\n\n. . .\n\n::: {.cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=3}\n``` {.python .cell-code}\n# Create a linear constraint, 0 <= x + y <= 2.\nct = solver.Constraint(0, 2, 'ct')\nct.SetCoefficient(x, 1)\nct.SetCoefficient(y, 1)\n\nprint('Number of constraints =', solver.NumConstraints())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of constraints = 1\n```\n:::\n:::\n\n\n\n---\n\n::: {.cell slideshow='{\"slide_type\":\"slide\"}' execution_count=4}\n``` {.python .cell-code}\n# Create the objective function, 3 * x + y.\nobjective = solver.Objective()\nobjective.SetCoefficient(x, 3)\nobjective.SetCoefficient(y, 1)\nobjective.SetMaximization()\n```\n:::\n\n\n\n. . .\n\n::: {.cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=5}\n``` {.python .cell-code}\nsolver.Solve()\nprint('Solution:')\nprint('Objective value =', objective.Value())\nprint('x =', x.solution_value())\nprint('y =', y.solution_value())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSolution:\nObjective value = 4.0\nx = 1.0\ny = 1.0\n```\n:::\n:::\n\n\n# Stiglers diet with OR-Tools\n\nMinimize the sum of money in dollar spent on food $f_i$ for $i=1..77$ $$\nmin \\sum_i f_i \n$$ The contraints are that the sum of all nutrients in the purchased\nfood $i$ must be bigger than the minimum for each nutrient $n_j$ for\n$j=1..9$. $$\n\\sum_i f_i * \\text{nutrient_per_dollar}_{ij} \\geq n_j\n$$ So we have a LP problem with 77 variables and 9 constraints.\n\n\n---\n\n::: {.cell slideshow='{\"slide_type\":\"slide\"}' execution_count=7}\n``` {.python .cell-code}\n# Calories are set to 3 instead of 3000, because in the table from 1939 Stigler gave the data in 1000s of Calories \n# (see https://math.berkeley.edu/~mgu/MA170F2015/Diet.pdf)\n# The notion of `kcal` () taken from the Google example) seems wrong here. 1 Calorie refers to 1000 kcal, not 1 kcal.\n\nprint(\"Nutritional Contraints Table\")\ndisplay(pd.DataFrame(nutrients, columns = ['Nutrient', 'Daily Recommended Intake']).set_index('Nutrient'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNutritional Contraints Table\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Daily Recommended Intake</th>\n    </tr>\n    <tr>\n      <th>Nutrient</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Calories (kcal)</th>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>Protein (g)</th>\n      <td>70.0</td>\n    </tr>\n    <tr>\n      <th>Calcium (g)</th>\n      <td>0.8</td>\n    </tr>\n    <tr>\n      <th>Iron (mg)</th>\n      <td>12.0</td>\n    </tr>\n    <tr>\n      <th>Vitamin A (KIU)</th>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>Vitamin B1 (mg)</th>\n      <td>1.8</td>\n    </tr>\n    <tr>\n      <th>Vitamin B2 (mg)</th>\n      <td>2.7</td>\n    </tr>\n    <tr>\n      <th>Niacin (mg)</th>\n      <td>18.0</td>\n    </tr>\n    <tr>\n      <th>Vitamin C (mg)</th>\n      <td>75.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n\n---\n\n::: {.cell slideshow='{\"slide_type\":\"slide\"}' execution_count=8}\n``` {.python .cell-code}\nprint(\"Food Nutrition Table\")\ndisplay(pd.DataFrame(data,columns = [\"Commodity\",\"Unit\",\"1939 price (cents)\",\"Calories\",\"Protein (g)\",\"Calcium (g)\",\"Iron (mg)\",\"Vitamin A (IU)\",\"Thiamine (mg)\",\"Riboflavin (mg)\",\"Niacin (mg)\",\"Ascorbic Acid (mg)\"]).set_index(\"Commodity\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFood Nutrition Table\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unit</th>\n      <th>1939 price (cents)</th>\n      <th>Calories</th>\n      <th>Protein (g)</th>\n      <th>Calcium (g)</th>\n      <th>Iron (mg)</th>\n      <th>Vitamin A (IU)</th>\n      <th>Thiamine (mg)</th>\n      <th>Riboflavin (mg)</th>\n      <th>Niacin (mg)</th>\n      <th>Ascorbic Acid (mg)</th>\n    </tr>\n    <tr>\n      <th>Commodity</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Wheat Flour (Enriched)</th>\n      <td>10 lb.</td>\n      <td>36.0</td>\n      <td>44.7</td>\n      <td>1411</td>\n      <td>2.0</td>\n      <td>365</td>\n      <td>0.0</td>\n      <td>55.4</td>\n      <td>33.3</td>\n      <td>441</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Macaroni</th>\n      <td>1 lb.</td>\n      <td>14.1</td>\n      <td>11.6</td>\n      <td>418</td>\n      <td>0.7</td>\n      <td>54</td>\n      <td>0.0</td>\n      <td>3.2</td>\n      <td>1.9</td>\n      <td>68</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Wheat Cereal (Enriched)</th>\n      <td>28 oz.</td>\n      <td>24.2</td>\n      <td>11.8</td>\n      <td>377</td>\n      <td>14.4</td>\n      <td>175</td>\n      <td>0.0</td>\n      <td>14.4</td>\n      <td>8.8</td>\n      <td>114</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Corn Flakes</th>\n      <td>8 oz.</td>\n      <td>7.1</td>\n      <td>11.4</td>\n      <td>252</td>\n      <td>0.1</td>\n      <td>56</td>\n      <td>0.0</td>\n      <td>13.5</td>\n      <td>2.3</td>\n      <td>68</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Corn Meal</th>\n      <td>1 lb.</td>\n      <td>4.6</td>\n      <td>36.0</td>\n      <td>897</td>\n      <td>1.7</td>\n      <td>99</td>\n      <td>30.9</td>\n      <td>17.4</td>\n      <td>7.9</td>\n      <td>106</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>Chocolate</th>\n      <td>8 oz.</td>\n      <td>16.2</td>\n      <td>8.0</td>\n      <td>77</td>\n      <td>1.3</td>\n      <td>39</td>\n      <td>0.0</td>\n      <td>0.9</td>\n      <td>3.4</td>\n      <td>14</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Sugar</th>\n      <td>10 lb.</td>\n      <td>51.7</td>\n      <td>34.9</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Corn Syrup</th>\n      <td>24 oz.</td>\n      <td>13.7</td>\n      <td>14.7</td>\n      <td>0</td>\n      <td>0.5</td>\n      <td>74</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>5</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Molasses</th>\n      <td>18 oz.</td>\n      <td>13.6</td>\n      <td>9.0</td>\n      <td>0</td>\n      <td>10.3</td>\n      <td>244</td>\n      <td>0.0</td>\n      <td>1.9</td>\n      <td>7.5</td>\n      <td>146</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>Strawberry Preserves</th>\n      <td>1 lb.</td>\n      <td>20.5</td>\n      <td>6.4</td>\n      <td>11</td>\n      <td>0.4</td>\n      <td>7</td>\n      <td>0.2</td>\n      <td>0.2</td>\n      <td>0.4</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>77 rows × 11 columns</p>\n</div>\n```\n:::\n:::\n\n\n\n---\n\n::: {.cell slideshow='{\"slide_type\":\"slide\"}' execution_count=9}\n``` {.python .cell-code}\nsolver = pywraplp.Solver.CreateSolver('GLOP')\n```\n:::\n\n\n\n. . .\n\n::: {.cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=10}\n``` {.python .cell-code}\n# Declare an array to hold our variables. (f = foods)\nfoods = [solver.NumVar(0.0, solver.infinity(), item[0]) for item in data]\n\nprint('Number of variables =', solver.NumVariables())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of variables = 77\n```\n:::\n:::\n\n\n\n. . .\n\n::: {.cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=11}\n``` {.python .cell-code}\n# Create the constraints, one per nutrient. (data = nutrients_per_dollar)\n# gurobipy can express a lists or arrays of constraints with a nicer DSL \n# instead of the many loops necessary with OR-Tools\nconstraints = []\nfor i, nutrient in enumerate(nutrients):\n    constraints.append(solver.Constraint(nutrient[1], solver.infinity()))\n    for j, item in enumerate(data):\n        constraints[i].SetCoefficient(foods[j], item[i + 3])\n\nprint('Number of constraints =', solver.NumConstraints())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of constraints = 9\n```\n:::\n:::\n\n\n\n. . .\n\n::: {.cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=12}\n``` {.python .cell-code}\n# Objective function: Minimize the sum of (price-normalized) foods.\nobjective = solver.Objective()\nfor food in foods:\n    objective.SetCoefficient(food, 1)\nobjective.SetMinimization()\n```\n:::\n\n\n\n---\n\n::: {.cell slideshow='{\"slide_type\":\"slide\"}' execution_count=13}\n``` {.python .cell-code}\nstatus = solver.Solve()\n\n# Check that the problem has an optimal solution.\nif status != solver.OPTIMAL:\n    print('The problem does not have an optimal solution!')\n    if status == solver.FEASIBLE:\n        print('A potentially suboptimal solution was found.')\n    else:\n        print('The solver could not solve the problem.')\n        exit(1)\n```\n:::\n\n\n\n---\n\n::: {.cell slideshow='{\"slide_type\":\"slide\"}' execution_count=14}\n``` {.python .cell-code}\n# Display the amounts (in dollars) to purchase of each food.\nnutrients_result = [0] * len(nutrients)\nprint('\\nAnnual Foods:')\nfor i, food in enumerate(foods):\n    if food.solution_value() > 0.0:\n        print('{}: ${}'.format(data[i][0], 365. * food.solution_value()))\n        for j, _ in enumerate(nutrients):\n            nutrients_result[j] += data[i][j + 3] * food.solution_value()\nprint('\\nOptimal annual price: ${:.4f}'.format(365. * objective.Value()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nAnnual Foods:\nWheat Flour (Enriched): $10.774457511918223\nLiver (Beef): $0.6907834111074193\nCabbage: $4.093268864842877\nSpinach: $1.8277960703546996\nNavy Beans, Dried: $22.275425687243036\n\nOptimal annual price: $39.6617\n```\n:::\n:::\n\n\n\n---\n\n::: {.cell slideshow='{\"slide_type\":\"slide\"}' execution_count=15}\n``` {.python .cell-code}\nprint('\\nNutrients per day:')\nfor i, nutrient in enumerate(nutrients):\n    print('{}: {:.2f} (min {})'.format(nutrient[0], nutrients_result[i],\n                                       nutrient[1]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nNutrients per day:\nCalories (kcal): 3.00 (min 3)\nProtein (g): 147.41 (min 70)\nCalcium (g): 0.80 (min 0.8)\nIron (mg): 60.47 (min 12)\nVitamin A (KIU): 5.00 (min 5)\nVitamin B1 (mg): 4.12 (min 1.8)\nVitamin B2 (mg): 2.70 (min 2.7)\nNiacin (mg): 27.32 (min 18)\nVitamin C (mg): 75.00 (min 75)\n```\n:::\n:::\n\n\n## Stieglers diet remarks\n\n> \"No one recommends these diets for anyone, let alone everyone.\"\n> (Stigler)\n\nMy observation: The amount of iron for spinach is 10x as high as in\nreality. Fixing this does not change the result. So why is spinach\nincluded in the diet?\n\n\n---\n\n::: {.cell slideshow='{\"slide_type\":\"slide\"}' execution_count=16}\n``` {.python .cell-code}\nnutrient_per_food = {}\n\nfor i, food in enumerate(foods):\n    if food.solution_value() > 0.0:      \n        for j, nutrient in enumerate(nutrients):\n            if food in nutrient_per_food:\n                nutrient_per_food[food].append(data[i][j + 3] * food.solution_value())\n            else:\n                nutrient_per_food[food]=[data[i][j + 3] * food.solution_value()]\n                \nfoods_df = pd.DataFrame.from_dict(nutrient_per_food, orient='index', columns=[n[0] for n in nutrients])\n\nfor i, nutrient in enumerate(nutrients):\n    foods_df[nutrient[0]]=(foods_df[nutrient[0]]/nutrients_result[i]*100).round(2)\n\ndisplay(foods_df)                 \n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Calories (kcal)</th>\n      <th>Protein (g)</th>\n      <th>Calcium (g)</th>\n      <th>Iron (mg)</th>\n      <th>Vitamin A (KIU)</th>\n      <th>Vitamin B1 (mg)</th>\n      <th>Vitamin B2 (mg)</th>\n      <th>Niacin (mg)</th>\n      <th>Vitamin C (mg)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Wheat Flour (Enriched)</th>\n      <td>43.98</td>\n      <td>28.25</td>\n      <td>7.38</td>\n      <td>17.82</td>\n      <td>0.00</td>\n      <td>39.69</td>\n      <td>36.41</td>\n      <td>47.66</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>Liver (Beef)</th>\n      <td>0.14</td>\n      <td>0.43</td>\n      <td>0.05</td>\n      <td>0.44</td>\n      <td>6.40</td>\n      <td>0.29</td>\n      <td>3.56</td>\n      <td>2.19</td>\n      <td>1.32</td>\n    </tr>\n    <tr>\n      <th>Cabbage</th>\n      <td>0.97</td>\n      <td>0.95</td>\n      <td>5.61</td>\n      <td>0.67</td>\n      <td>1.61</td>\n      <td>2.45</td>\n      <td>1.87</td>\n      <td>1.07</td>\n      <td>80.28</td>\n    </tr>\n    <tr>\n      <th>Spinach</th>\n      <td>0.18</td>\n      <td>0.36</td>\n      <td>0.00</td>\n      <td>1.14</td>\n      <td>91.98</td>\n      <td>0.69</td>\n      <td>2.56</td>\n      <td>0.60</td>\n      <td>18.39</td>\n    </tr>\n    <tr>\n      <th>Navy Beans, Dried</th>\n      <td>54.72</td>\n      <td>70.01</td>\n      <td>86.97</td>\n      <td>79.94</td>\n      <td>0.00</td>\n      <td>56.87</td>\n      <td>55.60</td>\n      <td>48.48</td>\n      <td>0.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## The end\n\nGoogle OR-Tools seem the best free open-source tool for solving OR\nproblems:\n\n-   good documentation\n-   many examples\n-   gurobipy has a nicer DSL for defining lists/arrays of constraints\n-   gurobipy free trial is limited to 2000 variables, OR-Tools are\n    unlimited\n\n**Next session**: How to solve the facility location problem with\nOR-Tools and apply that to solve the Shell Hackathon.\n\n<span style=\"font-size:larger;\">Eat your spinach - Not for the iron, but\nfor the Vitamin A!</span>\n\n",
    "supporting": [
      "orintro_report_pandoc_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}